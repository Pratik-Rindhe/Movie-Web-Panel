{"ast":null,"code":"var _jsxFileName = \"E:\\\\Nimap Task\\\\Movie-Task-Nimap-master\\\\src\\\\components\\\\TopRatedPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from '../components/Card';\nimport { TOP_RATED_URL } from '../Service/Api';\nimport Header from '../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopRatedPage() {\n  _s();\n  const [data, setData] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    getAllData();\n  }, [currentPage]);\n  async function getAllData() {\n    try {\n      let apiUrl = `${TOP_RATED_URL}&page=${currentPage}`;\n      if (searchQuery.trim()) {\n        apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=c45a857c193f6302f2b5061c3b85e743&query=${encodeURIComponent(searchQuery)}&page=${currentPage}`;\n      }\n      const apiData = await fetch(apiUrl);\n      const res = await apiData.json();\n      setData(res.results);\n    } catch (error) {\n      console.error(\"Failed to fetch data:\", error);\n    }\n  }\n  const handleSearch = query => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n    getAllData();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: data.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(TopRatedPage, \"B78fxhPjwdUR4n49hegsu/oTzhM=\");\n_c = TopRatedPage;\nexport default TopRatedPage;\nvar _c;\n$RefreshReg$(_c, \"TopRatedPage\");","map":{"version":3,"names":["React","useEffect","useState","Card","TOP_RATED_URL","Header","jsxDEV","_jsxDEV","TopRatedPage","_s","data","setData","searchQuery","setSearchQuery","currentPage","setCurrentPage","getAllData","apiUrl","trim","encodeURIComponent","apiData","fetch","res","json","results","error","console","handleSearch","query","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","className","map","movie","id","_c","$RefreshReg$"],"sources":["E:/Nimap Task/Movie-Task-Nimap-master/src/components/TopRatedPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from '../components/Card';\nimport { TOP_RATED_URL } from '../Service/Api';\nimport Header from '../components/Header';\n\nfunction TopRatedPage() {\n  const [data, setData] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    getAllData();\n  }, [currentPage]);\n\n  async function getAllData() {\n    try {\n      let apiUrl = `${TOP_RATED_URL}&page=${currentPage}`;\n      if (searchQuery.trim()) {\n        apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=c45a857c193f6302f2b5061c3b85e743&query=${encodeURIComponent(searchQuery)}&page=${currentPage}`;\n      }\n\n      const apiData = await fetch(apiUrl);\n      const res = await apiData.json();\n      setData(res.results);\n    } catch (error) {\n      console.error(\"Failed to fetch data:\", error);\n    }\n  }\n\n  const handleSearch = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n    getAllData();\n  };\n\n  return (\n    <div>\n      <Header onSearch={handleSearch} />\n      <div className=\"movie-list\">\n        {data.map((movie) => (\n          <Card key={movie.id} movie={movie} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default TopRatedPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACde,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;EAEjB,eAAeE,UAAUA,CAAA,EAAG;IAC1B,IAAI;MACF,IAAIC,MAAM,GAAG,GAAGb,aAAa,SAASU,WAAW,EAAE;MACnD,IAAIF,WAAW,CAACM,IAAI,CAAC,CAAC,EAAE;QACtBD,MAAM,GAAG,4FAA4FE,kBAAkB,CAACP,WAAW,CAAC,SAASE,WAAW,EAAE;MAC5J;MAEA,MAAMM,OAAO,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAAC;MACnC,MAAMK,GAAG,GAAG,MAAMF,OAAO,CAACG,IAAI,CAAC,CAAC;MAChCZ,OAAO,CAACW,GAAG,CAACE,OAAO,CAAC;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAEA,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC9Bf,cAAc,CAACe,KAAK,CAAC;IACrBb,cAAc,CAAC,CAAC,CAAC;IACjBC,UAAU,CAAC,CAAC;EACd,CAAC;EAED,oBACET,OAAA;IAAAsB,QAAA,gBACEtB,OAAA,CAACF,MAAM;MAACyB,QAAQ,EAAEH;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClC3B,OAAA;MAAK4B,SAAS,EAAC,YAAY;MAAAN,QAAA,EACxBnB,IAAI,CAAC0B,GAAG,CAAEC,KAAK,iBACd9B,OAAA,CAACJ,IAAI;QAAgBkC,KAAK,EAAEA;MAAM,GAAvBA,KAAK,CAACC,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACzB,EAAA,CAxCQD,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA0CrB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}